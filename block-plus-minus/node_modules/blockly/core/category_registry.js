/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Categories can be used by defining a name in xml.
 * @author aschmiedt@google.com (Abby Schmiedt)
 */
'use strict';

goog.provide('Blockly.categoryRegistry');


/**
 * The set of all registered categories, keyed by ??
 * @type {!Object<string, !{fromJson: Function}>}
 * @private
 */
Blockly.categoryRegistry.typeMap_ = {};

/**
 * Registers a field type.
 * Blockly.fieldRegistry.fromJson uses this registry to
 * find the appropriate field type.
 * @param {string} type The field type name as used in the JSON definition.
 * @param {!{fromJson: Function}} fieldClass The field class containing a
 *     fromJson function that can construct an instance of the field.
 * @throws {Error} if the type name is empty, the field is already
 *     registered, or the fieldClass is not an object containing a fromJson
 *     function.
 */
Blockly.categoryRegistry.register = function(category) {
  var name = category.name;
  if ((typeof name != 'string') || (name.trim() == '')) {
    throw Error('Invalid field type "' + name + '". The type must be a' +
      ' non-empty string.');
  }
  if (Blockly.categoryRegistry.typeMap_[name]) {
    throw Error('Error: Field "' + name + '" is already registered.');
  }
  // if (!fieldClass || (typeof fieldClass.fromJson != 'function')) {
  //   throw Error('Field "' + fieldClass + '" must have a fromJson function');
  // }
  Blockly.categoryRegistry.typeMap_[name] = category;
};

/**
 * Unregisters the field registered with the given type.
 * @param {string} type The field type name as used in the JSON definition.
 */
Blockly.categoryRegistry.unregister = function(type) {
  if (Blockly.categoryRegistry.typeMap_[type]) {
    delete Blockly.categoryRegistry.typeMap_[type];
  } else {
    console.warn('No field mapping for type "' + type +
        '" found to unregister');
  }
};

/**
 * Construct a Field from a JSON arg object.
 * Finds the appropriate registered field by the type name as registered using
 * Blockly.fieldRegistry.register.
 * @param {!Object} options A JSON object with a type and options specific
 *     to the field type.
 * @return {Blockly.Field} The new field instance or null if a field wasn't
 *     found with the given type name
 * @package
 */
Blockly.categoryRegistry.fromName = function(name) {
  var category = Blockly.categoryRegistry.typeMap_[name];
  if (!category) {
    console.warn('nope');
    return null;
  }
  return category;
};
